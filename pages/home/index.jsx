import React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useSelector, useDispatch } from "react-redux";

import withAuth from "@/hoc/withAuth";
import AppLayout from "@/layouts/appLayout.jsx";

import {
  exportCostingIcon,
  ricePriceServiceIcon,
  exportOrdersServiceIcon,
  labsServiceIcon,
  networkServiceIcon,
  communityProductIcon,
} from "../../theme/icon";

// Import Components
import { Header } from "@/components/Header";

// Import Containers

// Import Layouts

function Home() {
  const router = useRouter();
  const dispatch = useDispatch();

  const [mainContainerHeight, setMainContainerHeight] = React.useState(0);
  const [searchStringValue, setSearchStringValue] = React.useState("");

  function handleSearch(searchString) {
    //
  }

  React.useEffect(() => {
    const element = document.getElementById("fixedMenuSection");
    if (element) {
      const height = element.offsetHeight;
      setMainContainerHeight(height);
    }
  }, []);

  const handleInputDoneClick = (event) => {
    event.target.blur();
  };

  let blurOccurred = null;

  return (
    <React.Fragment>
      <Head>
        <meta charSet="utf-8" />

        <title>My costing history | PWIP</title>

        <meta name="Reciplay" content="Reciplay" />
        <meta name="description" content="Generated by create next app" />

        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        {/*<meta
          name="apple-mobile-web-app-status-bar-style"
          content="black-translucent"
        />
*/}
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />

        {/* <link rel="manifest" href="/manifest.json" /> */}
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>

      <AppLayout>
        <Header />

        <div
          className={`relative top-[56px] h-full w-full bg-pwip-white-100 z-0 py-6`}
        >
          <div
            id="fixedMenuSection"
            className={`fixed left-0 top-[56px] h-[auto] w-full bg-white z-0 pt-3 pb-6 px-5`}
          >
            <div
              style={{
                filter: "drop-shadow(0px 0px 2px rgba(0, 0, 0, 0.12))",
              }}
              className="h-[48px] mt-[10px] w-full rounded-md bg-white text-base font-sans inline-flex items-center px-[18px]"
            >
              <button className="outline-none border-none bg-transparent inline-flex items-center justify-center">
                <svg
                  width="17"
                  height="16"
                  viewBox="0 0 17 16"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    opacity="0.7"
                    d="M15.62 14.7062L12.0868 11.3939M13.9956 7.09167C13.9956 10.456 11.0864 13.1833 7.49778 13.1833C3.90915 13.1833 1 10.456 1 7.09167C1 3.72733 3.90915 1 7.49778 1C11.0864 1 13.9956 3.72733 13.9956 7.09167Z"
                    stroke="#878D96"
                    strokeWidth="1.52292"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
              </button>
              <input
                placeholder="Search for a rice variety"
                className="h-full w-full bg-white pl-[18px] text-sm font-sans outline-none border-none placeholder:text-pwip-v2-gray-500"
                value={searchStringValue}
                onFocus={() => {
                  window.clearTimeout(blurOccurred);
                }}
                onBlur={(e) => {
                  // setSearchFocus(false);
                  // dispatch(searchScreenFailure());
                  blurOccurred = window.setTimeout(function () {
                    handleInputDoneClick(e);
                  }, 10);
                }}
                onChange={(event) => {
                  setSearchStringValue(event.target.value);
                  handleSearch(event.target.value);
                }}
              />
              {searchStringValue ? (
                <button
                  onClick={() => {
                    setSearchStringValue("");
                    handleSearch("");
                  }}
                  className="outline-none border-none bg-transparent inline-flex items-center justify-center"
                >
                  <svg
                    width="19"
                    height="19"
                    viewBox="0 0 19 19"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M13.4584 5.54199L5.54175 13.4587M5.54175 5.54199L13.4584 13.4587"
                      stroke="#686E6D"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                </button>
              ) : null}
            </div>
          </div>
          <div
            className={`min-h-[calc(100vh-140px)] inline-flex flex-col h-full w-full px-5 bg-white pb-0 overflow-auto hide-scroll-bar`}
            style={{
              paddingTop: mainContainerHeight + "px",
              paddingBottom: mainContainerHeight + 20 + "px",
            }}
          >
            <div className="w-full grid grid-cols-3 gap-x-5 gap-y-8">
              {[
                {
                  name: "Export Costing",
                  icon: exportCostingIcon,
                  url: "/export-costing",
                },
                {
                  name: "Rice prices",
                  icon: ricePriceServiceIcon,
                  url: "/service/rice-price",
                },
                {
                  name: "Export orders",
                  icon: exportOrdersServiceIcon,
                  url: "/service/export-orders",
                },
                {
                  name: "Labs",
                  icon: labsServiceIcon,
                  url: "/service/labs",
                },
                {
                  name: "Network",
                  icon: networkServiceIcon,
                  url: "/service/network",
                },
                {
                  name: "Community",
                  icon: communityProductIcon,
                  url: "https://community.pwip.co/",
                },
              ].map((item, index) => {
                return (
                  <div
                    key={item?.name + "_" + index}
                    onClick={() => {
                      if (item.name.toLowerCase() === "community") {
                        window.open(item.url, "_blank");

                        return;
                      }

                      router.push(item?.url);
                    }}
                    className="inline-flex flex-col w-full items-center space-y-2"
                  >
                    <div className="w-full h-[78px] rounded-lg border-[1px] border-pwip-v2-primary-50 inline-flex items-center justify-center">
                      {item.icon}
                    </div>

                    <span className="text-pwip-black-600 font-medium text-xs text-center">
                      {item.name}
                    </span>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </AppLayout>
    </React.Fragment>
  );
}

export default withAuth(Home);
