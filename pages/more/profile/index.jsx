import React, { useEffect, useRef } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { Formik } from "formik";

import withAuth from "@/hoc/withAuth";
import AppLayout from "@/layouts/appLayout.jsx";

// Import Components
import { Header } from "@/components/Header";

const initialValues = {
    fullName: "",
    email: "",
    number:"",
    companyName: "",
    profession: "",
    gstNumber: "",
  };


function Profile() {
  const router = useRouter();
  const formik = useRef();

  const formFields = [
    { name: "fullName", label: "Name" },
    { name: "email", label: "Email" },
    { name: "number", label: "Number" },
    { name: "companyName", label: "Company Name" },
    { name: "profession", label: "Profession" },
    { name: "gstNumber", label: "GST Number" },
];



  const handleFormUpdate = () => {
    // Handle the form update logic here
    // You can use formik.handleSubmit or your custom logic
  };



  return (
    <React.Fragment>
      <Head>
        <meta charSet="utf-8" />
        {/* <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
        /> */}

        <title>Export Costing by pwip</title>

        <meta name="Reciplay" content="Reciplay" />
        <meta name="description" content="Generated by create next app" />

        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta
          name="apple-mobile-web-app-status-bar-style"
          content="black-translucent"
        />

        <link rel="manifest" href="/manifest.json" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppLayout>
        <Header />

        <div
          className={`relative top-[72px] h-full w-full bg-white z-10 py-6 px-5`}
        >
          <span className="text-pwip-gray-100 font-sans font-normal text-md text-left">
            Personal details
          </span>


          {formFields.map((field) => (
            <div key={field.name} className="relative mb-4">
              <input
                type="text"
                id={field.name}
                className="block px-2.5 pb-2.5 pt-4 w-full text-sm text-gray-900 bg-transparent rounded-md border border-pwip-gray-500 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                placeholder=" "
              />
              <label
                htmlFor={field.name}
                className="absolute text-sm text-pwip-gray-500 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-white px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 left-1"
              >
                {field.label}
              </label>
            </div>
          ))}
        <button
            type="button"
            className="w-full bg-pwip-primary text-white py-2.5 px-2.5 rounded-md hover:bg-primary"
            onClick={handleFormUpdate}
          >
        Update Changes
        </button>
        </div>
        {/*  */}
      </AppLayout>
    </React.Fragment>
  );
}

export default withAuth(Profile);
