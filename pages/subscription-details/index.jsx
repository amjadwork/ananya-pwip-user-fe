/** @format */

import React, { useCallback } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useSelector, useDispatch } from "react-redux";
import Lottie from "lottie-react";

// import moment from "moment";
import { Button } from "@/components/Button";
import useRazorpay from "react-razorpay";
import { useOverlayContext } from "@/context/OverlayContext";

import withAuth from "@/hoc/withAuth";
import AppLayout from "@/layouts/appLayout.jsx";
import SubscriptionDetailCard from "@/components/SubscriptionDetailCard";

import {
  getServicesRequest,
  getPlansRequest,
  // getSubscriptionRequest,
} from "@/redux/actions/subscription.action";

import {
  // fetchMyCostingRequest,
  fetchAllMyCostingsRequest,
  // saveCostingFailure,
} from "@/redux/actions/myCosting.actions";

// Import Components
import { Header } from "@/components/Header";
import axios from "axios";
import { apiBaseURL, razorpayKey } from "@/utils/helper";

import paymentSuccessful from "../../theme/lottie/payment-success.json";
import moment from "moment";
import { apiStagePaymentBeUrl, exportCostingServiceId } from "utils/helper";
import { filterIcon } from "../../theme/icon";

// Import Containers

// Import Layouts

function filterArrayByReference(originalArray, referenceArray) {
  // Filter the array based on the condition
  const newArray = originalArray.filter((item) => {
    // Check if any ID in the applicable_services array is present in the reference array
    return item.applicable_services?.some((id) => referenceArray.includes(id));
  });

  return newArray;
}

function SubscriptionDetails() {
  const router = useRouter();
  const dispatch = useDispatch();

  const { openBottomSheet, openToastMessage } = useOverlayContext();

  const myCosting = useSelector((state) => state.myCosting);
  const servicesData = useSelector((state) => state.subscription?.services);
  const plansData = useSelector((state) => state.subscription?.plans);

  const userDetails = useSelector((state) => state.auth?.user);
  const authToken = useSelector((state) => state.auth?.token);

  const [allMyCostingsData, setAllMyCostingsData] = React.useState([]);
  const [modulePlansData, setModulePlansData] = React.useState([]);
  const [moduleServicesData, setModuleServicesData] = React.useState([]);
  const [usersSubscriptionData, setUsersSubscriptionData] =
    React.useState(null);

  function calculateDaysLeft(expiryDate) {
    const currentDate = new Date();
    const expiry = new Date(expiryDate);
    const differenceInTime = expiry.getTime() - currentDate.getTime();
    const differenceInDays = Math.ceil(differenceInTime / (1000 * 3600 * 24));
    return differenceInDays;
  }

  return (
    <React.Fragment>
      <Head>
        <meta charSet="utf-8" />

        <title>Subscription | PWIP</title>

        <meta name="Reciplay" content="Reciplay" />
        <meta name="description" content="Generated by create next app" />

        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        {/*<meta
          name="apple-mobile-web-app-status-bar-style"
          content="black-translucent"
        />
*/}
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />

        {/* <link rel="manifest" href="/manifest.json" /> */}
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>

      <AppLayout>
        <Header />

        <div className={`relative h-full w-full bg-white z-0`}>
          <div
            className={`min-h-[calc(100vh-120px)] inline-flex flex-col h-full w-full px-5 pt-[82px] pb-[120px] overflow-auto hide-scroll-bar`}
          >
            <React.Fragment>
            <SubscriptionDetailCard/>
            </React.Fragment>
          </div>
        </div>
        {/*  */}
      </AppLayout>
    </React.Fragment>
  );
}

export default withAuth(SubscriptionDetails);
