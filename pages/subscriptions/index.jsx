/** @format */

import React from "react";
import Head from "next/head";
import { useSelector, useDispatch } from "react-redux";

import withAuth from "@/hoc/withAuth";
import AppLayout from "@/layouts/appLayout.jsx";
import SubscriptionCard from "@/components/SubscriptionCard";

import {
  getServicesRequest,
  getPlansRequest,
  // getSubscriptionRequest,
} from "@/redux/actions/subscription.action";

// Import Components
import { Header } from "@/components/Header";
import axios from "axios";
import { apiBaseURL } from "@/utils/helper";

import { filterIcon } from "../../theme/icon";

function filterArrayByReference(originalArray, referenceArray) {
  // Filter the array based on the condition
  const newArray = originalArray.filter((item) => {
    // Check if any ID in the applicable_services array is present in the reference array
    return item.applicable_services?.some((id) => referenceArray.includes(id));
  });

  return newArray;
}

function formatDate(dateString) {
  const dateObj = new Date(dateString);
  const options = { day: "numeric", month: "long", year: "numeric" };
  return dateObj.toLocaleDateString("en-GB", options);
}

function Subscription() {
  const dispatch = useDispatch();

  const servicesData = useSelector((state) => state.subscription?.services);
  const plansData = useSelector((state) => state.subscription?.plans);

  const authToken = useSelector((state) => state.auth?.token);

  const [modulePlansData, setModulePlansData] = React.useState([]);
  const [moduleServicesData, setModuleServicesData] = React.useState([]);
  const [usersSubscriptionData, setUsersSubscriptionData] =
    React.useState(null);

  React.useEffect(() => {
    dispatch(getServicesRequest());
  }, []);

  React.useEffect(() => {
    if (servicesData && servicesData.length) {
      setModuleServicesData([...servicesData]);
      dispatch(getPlansRequest());
    }
  }, [servicesData]);

  React.useEffect(() => {
    if (plansData && moduleServicesData.length) {
      const servicesId = new Set(
        [...moduleServicesData].map((d) => d.id).flat()
      );
      const uniqueServicesId = [...servicesId];

      const plans = [
        ...filterArrayByReference(plansData, uniqueServicesId),
      ].filter((f) => f.show_for_user);

      setModulePlansData([...plans]);
    }
  }, [plansData, moduleServicesData]);

  const checkUserSubscriptionDetails = async () => {
    try {
      const response = await axios.get(
        apiBaseURL + "api" + "/get-user-subscription",
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      return response.data;
    } catch (err) {
      return err;
    }
  };

  React.useEffect(() => {
    if (modulePlansData.length) {
      const getUsersSubscriptionDetails = async () => {
        const response = await checkUserSubscriptionDetails();

        if (response?.length) {
          setUsersSubscriptionData(response);
        }
      };
      getUsersSubscriptionDetails();
    }
  }, [modulePlansData]);

  return (
    <React.Fragment>
      <Head>
        <meta charSet="utf-8" />

        <title>Subscription | PWIP</title>

        <meta name="PWIP App" content="PWIP App" />
        <meta name="description" content="Generated by create next app" />

        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        {/*<meta
          name="apple-mobile-web-app-status-bar-style"
          content="black-translucent"
        />
*/}
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />

        {/* <link rel="manifest" href="/manifest.json" /> */}
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>

      <AppLayout>
        <Header />

        <div className={`relative h-full w-full bg-white z-0`}>
          <div
            className={`min-h-[calc(100vh-120px)] inline-flex flex-col h-full w-full px-5 pt-[82px] pb-[120px] bg-white overflow-auto hide-scroll-bar`}
          >
            <div className="text-[#1B1B1B] text-sm font-normal flex justify-between">
              <span>All Subscriptions</span>
              {filterIcon}
            </div>

            <React.Fragment>
              {usersSubscriptionData &&
                usersSubscriptionData.map((subscription, index) => {
                  const { validity, expiryDate } = subscription;
                  const date = formatDate(expiryDate);
                  let subscriptionValidity;

                  if (validity === "Lifetime Access") {
                    subscriptionValidity = validity;
                  } else {
                    if (subscription.expiresInDays <= 0) {
                      subscriptionValidity = (
                        <span className="text-red-500">Expired</span>
                      );
                    } else {
                      subscriptionValidity =
                        subscription.expiresInDays <= 10 ? (
                          <span className="text-red-500">{`Expires in ${daysLeft} days`}</span>
                        ) : (
                          `Expires on ${date}`
                        );
                    }
                  }

                  return (
                    <div key={index}>
                      <SubscriptionCard
                        subscriptionName={subscription.serviceDetail.name}
                        subscriptionType={subscription.planDetail.name}
                        subscriptionValidity={subscriptionValidity}
                        subscription_id={subscription.subscription_id}
                      />
                    </div>
                  );
                })}
            </React.Fragment>
          </div>
        </div>
        {/*  */}
      </AppLayout>
    </React.Fragment>
  );
}

export default withAuth(Subscription);
