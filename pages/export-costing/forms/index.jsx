import React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import Select from "react-select";

// Import Components
import { Header } from "@/components/Header";

// Import Containers

// Import Layouts

// Import constants
import { ecForm } from "@/constants/ec.form";
import { customSelectStyles } from "@/constants/select.style";

const HeaderLocalComponent = (props) => {
  return (
    <div className="inline-flex items-end justify-between w-full h-auto">
      <div className="inline-flex items-center justify-center space-x-3">
        <div
          className="inline-flex items-center justify-center"
          onClick={props.handleBack}
        >
          <svg
            className="h-5 w-5 text-gray-200"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
              clipRule="evenodd"
            />
          </svg>
        </div>
        <div className="inline-flex flex-col items-start">
          <span className="text-gray-50 text-sm">Importer</span>
          <span className="text-gray-200 text-xs">26 Jun | FOR | Rice</span>
        </div>
      </div>
      <span className="text-white text-xs">1 USD = Rs 78</span>
    </div>
  );
};

export default function ExportCostingForms() {
  let exportCostingForm = [...ecForm];
  const router = useRouter();

  const [activeTab, setActiveTab] = React.useState(0);
  const [activeRadioIndex, setActiveRadioIndex] = React.useState(0);

  const handleStepNavigation = () => {
    let count = activeTab;

    if (count >= 0 && count < exportCostingForm.length - 1) {
      count = count + 1;
      setActiveTab(count);
    }
  };

  const handleBack = () => {
    let count = activeTab;

    if (activeTab !== 0) {
      if (count >= 0 && count <= exportCostingForm.length - 1) {
        count = count - 1;
        setActiveTab(count);
      }
    }

    if (activeTab === 0) {
      router.back();
    }
  };

  return (
    <React.Fragment>
      <Head>
        <meta charSet="utf-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
        />

        <title>Export Costing by pwip</title>

        <meta name="Reciplay" content="Reciplay" />
        <meta name="description" content="Generated by create next app" />

        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta
          name="apple-mobile-web-app-status-bar-style"
          content="black-translucent"
        />

        <link rel="manifest" href="/manifest.json" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="h-screen w-screen inline-flex flex-col relative bg-[#f2f2f2]">
        <Header
          hideLogo={true}
          component={<HeaderLocalComponent handleBack={handleBack} />}
        ></Header>
        <div className="inline-flex flex-col relative w-full h-full pt-4 overflow-hidden">
          <span className="line-clamp-1 font-bold text-[#262727] text-xl px-5">
            Export Costing
          </span>
          <div className="w-full inline-flex items-center justify-start space-x-2 overflow-x-auto p-1 hide-scroll-bar mt-6 !px-5">
            {exportCostingForm.map((tab, index) => {
              return (
                <div
                  key={index}
                  className={`inline-flex flex-col min-w-[92px] space-y-2`}
                  onClick={() => setActiveTab(index)}
                >
                  <span
                    className={`${
                      activeTab === index ? "text-[#2373bf]" : "text-[#77787b]"
                    } text-xs transform-all`}
                  >
                    {index + 1}. {tab.title}
                  </span>
                  <div
                    className={`w-full h-2 transform-all ${
                      activeTab === index ? "bg-[#2373bf]" : "bg-gray-200"
                    } ${index === 0 ? "rounded-l-full" : ""} ${
                      index === exportCostingForm.length - 1
                        ? "rounded-r-full"
                        : ""
                    }`}
                  />
                </div>
              );
            })}
          </div>

          <div className="w-full h-full inline-flex flex-col items-start justify-start overflow-y-auto p-1 hide-scroll-bar mt-6 bg-white rounded-t-[24px]">
            <div className="w-full h-full inline-flex flex-col justify-between px-5 py-4">
              <div className="w-full h-full inline-flex flex-col">
                <div className="inline-flex flex-col justify-start space-y-1 relative">
                  <span className="line-clamp-1 font-semibold text-[#262727] text-md">
                    Fill all the details
                  </span>
                </div>

                <div className="w-full h-full inline-flex flex-col space-y-4 mt-6">
                  {exportCostingForm[activeTab].form.map((field, index) => {
                    if (field.type === "input") {
                      return (
                        <div
                          key={index}
                          className="inline-flex flex-col w-full space-y-3"
                        >
                          <label className="text-xs text-[#77787b] font-regular">
                            {field.label}
                          </label>
                          <div className="w-full h-[40px] rounded-full ring-1 ring-gray-200 py-2 px-3">
                            <input
                              placeholder={field.placeholder}
                              className="w-full rounded-full outline-none text-xs"
                            />
                          </div>
                        </div>
                      );
                    }

                    if (field.type === "select") {
                      return (
                        <div
                          key={index}
                          className="inline-flex flex-col w-full space-y-3"
                        >
                          <label className="text-xs text-[#77787b] font-regular">
                            {field.label}
                          </label>
                          <Select
                            id={index}
                            instanceId={index}
                            placeholder={field.placeholder}
                            options={field?.options}
                            styles={customSelectStyles}
                            isSearchable={false}
                          />
                        </div>
                      );
                    }

                    if (field.type === "counter") {
                      return (
                        <div
                          key={index}
                          className="inline-flex flex-col items-start w-full space-y-3"
                        >
                          <label className="text-xs text-[#77787b] font-regular">
                            {field.label}
                          </label>
                          <div className="inline-flex items-center w-auto space-x-2">
                            <div className="w-[30px] h-[30px] inline-flex items-center justify-center">
                              -
                            </div>
                            <div className="w-[50px] h-[30px] rounded-full ring-1 ring-gray-200 inline-flex items-center justify-center p-1">
                              <input
                                placeholder={field.placeholder}
                                className="w-full h-full rounded-sm outline-none text-xs text-center"
                              />
                            </div>
                            <div className="w-[30px] h-[30px] inline-flex items-center justify-center">
                              +
                            </div>
                          </div>
                        </div>
                      );
                    }

                    if (field.type === "imageRadio") {
                      return (
                        <div
                          key={index}
                          className="inline-flex flex-col w-full space-y-3"
                        >
                          <label className="text-xs text-[#77787b] font-regular">
                            {field.label}
                          </label>
                          <div className="inline-flex items-center space-x-4">
                            {field?.options.map((opt, i) => {
                              return (
                                <div
                                  key={i}
                                  className={`inline-flex flex-col justify-end items-center w-[calc(100%/2)] min-h-[120px] ring-1 ring-gray-200 rounded-md p-2 transition-all`}
                                >
                                  <span className={`text-xs text-[#262727]`}>
                                    {opt}
                                  </span>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      );
                    }

                    if (field.type === "inputRadio") {
                      return (
                        <div
                          key={index}
                          className="inline-flex flex-col flex-row w-full space-y-3"
                        >
                          <label className="text-xs text-[#77787b] font-regular">
                            {field.label}
                          </label>
                          <div className="inline-flex items-center space-x-3">
                            <div className="w-[60px] h-[30px] rounded-full ring-1 ring-gray-200 inline-flex items-center justify-center p-1">
                              <input className="w-full h-full rounded-sm outline-none text-xs text-center" />
                            </div>
                            {field?.options.map((opt, i) => {
                              return (
                                <div
                                  key={i}
                                  onClick={() => setActiveRadioIndex(i)}
                                  className={`${
                                    activeRadioIndex === i
                                      ? "bg-[#2373bf]"
                                      : "bg-gray-200"
                                  } px-3 py-[6px] min-w-[60px] rounded-full inline-flex items-center justify-center`}
                                >
                                  <span
                                    className={`font-regular ${
                                      activeRadioIndex === i
                                        ? "text-gray-200"
                                        : "text-[#77787b]"
                                    } text-xs text-center`}
                                  >
                                    {opt}
                                  </span>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      );
                    }

                    if (field.type === "radio") {
                      return (
                        <div
                          key={index}
                          className="inline-flex flex-col flex-row w-full space-y-3"
                        >
                          <label className="text-xs text-[#77787b] font-regular">
                            {field.label}
                          </label>
                          <div className="inline-flex items-center space-x-3">
                            {field?.options.map((opt, i) => {
                              return (
                                <div
                                  key={i}
                                  onClick={() => setActiveRadioIndex(i)}
                                  className={`${
                                    activeRadioIndex === i
                                      ? "bg-[#2373bf]"
                                      : "bg-gray-200"
                                  } px-3 py-[6px] min-w-[60px] rounded-full inline-flex items-center justify-center`}
                                >
                                  <span
                                    className={`font-regular ${
                                      activeRadioIndex === i
                                        ? "text-gray-200"
                                        : "text-[#77787b]"
                                    } text-xs text-center`}
                                  >
                                    {opt}
                                  </span>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      );
                    }
                  })}
                </div>
              </div>

              <button
                onClick={() => {
                  if (activeTab !== 4) {
                    handleStepNavigation();
                  }
                }}
                className="w-full rounded-full py-3 px-4 bg-[#2475c0] text-white text-center text-sm font-semibold"
              >
                {activeTab === exportCostingForm.length - 1
                  ? "Preview Export Costing"
                  : "Next Step"}
              </button>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}
