import React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useDispatch, useSelector } from "react-redux";
import Lottie from "lottie-react";

import { fetchProductsRequest } from "@/redux/actions/products.actions";

import withAuth from "@/hoc/withAuth";

import AppLayout from "@/layouts/appLayout.jsx";

import { Header } from "@/components/Header";

import { useOverlayContext } from "@/context/OverlayContext";

import SelectVariantContainer from "@/containers/ec/SelectVariant";
import ServiceSplashLottie from "../../theme/lottie/service-splash.json";

function ExportCosting() {
  const router = useRouter();
  const dispatch = useDispatch();
  const token = useSelector((state) => state.auth.token);

  const { stopLoading } = useOverlayContext();

  const [splashScreen, setSplashScreen] = React.useState(false);
  const [progressValue, setProgressValue] = React.useState(0); // State for progress value

  async function getProductList() {
    try {
      dispatch(fetchProductsRequest());
    } catch (error) {
      console.log(error);
    }
  }

  React.useEffect(() => {
    if (token) {
      getProductList();
    }
  }, [token]);

  React.useEffect(() => {
    setSplashScreen(true);
    stopLoading();
  }, []);

  React.useEffect(() => {
    // Update progress value using requestAnimationFrame
    const updateProgressValue = () => {
      const duration = 2000;
      const startTime = Date.now();
      const endTime = startTime + duration;

      const updateProgress = () => {
        const now = Date.now();
        const elapsedTime = now - startTime;
        const progress = (elapsedTime / duration) * 100;

        const currentValue = progress > 100 ? 100 : progress; // Limit progress to 100%
        setProgressValue(currentValue);

        if (now < endTime) {
          requestAnimationFrame(updateProgress);
        }
      };

      requestAnimationFrame(updateProgress);
    };

    if (splashScreen) {
      updateProgressValue();

      // Reset progress value after given seconds
      setTimeout(() => {
        stopLoading();
        setProgressValue(0);
        setSplashScreen(false);
      }, 2300);
    }
  }, [splashScreen]);

  const style = {
    height: 180,
  };

  return (
    <React.Fragment>
      <Head>
        <meta charSet="utf-8" />
        {/* <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
        /> */}

        <title>Select Rice | PWIP</title>

        <meta name="Reciplay" content="Reciplay" />
        <meta name="description" content="Generated by create next app" />

        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        {/*<meta
          name="apple-mobile-web-app-status-bar-style"
          content="black-translucent"
        />
*/}
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />

        {/* <link rel="manifest" href="/manifest.json" /> */}
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>

      <AppLayout>
        <Header />
        <SelectVariantContainer roundedTop={true} />

        {/* Splash screen */}
        <div
          className={`h-screen w-screen fixed top-0 left-0 transition-all bg-white inline-flex flex-col justify-between ${
            splashScreen ? "block opacity-1 z-20" : "hidden opacity-0"
          }`}
        >
          <div className="inline-flex space-y-3 items-center flex-col justify-center h-full w-full px-8 relative top-[-100px]">
            {/* Splash screen content */}
            <div className="min-w-[310px] h-auto relative inline-flex items-center justify-center">
              <img
                className="h-[42px] absolute z-10"
                src="/assets/images/services/ec-service-logo.png"
              />
              <div className="w-auto z-0">
                <Lottie animationData={ServiceSplashLottie} style={style} />
              </div>
            </div>

            <div className="inline-flex items-center flex-col justify-center">
              <span className="text-center text-sm text-pwip-black-500 font-semibold leading-5">
                Generate costing on your fingertips
              </span>
            </div>
            {/* Progress bar */}
            <div className="px-5 w-full h-auto">
              <div className="w-full h-2 rounded-full bg-pwip-v2-gray-350 !mt-12">
                <div
                  style={{ width: `${progressValue}%` }}
                  className="h-2 rounded-full bg-pwip-v2-primary-500"
                ></div>
              </div>
            </div>
          </div>

          <div className="inline-flex items-center flex-col justify-center px-8 pb-8">
            <span className="text-center text-xs text-pwip-v2-gray-500 leading-5">
              Generate costing in 2 clicks for estimations and customize it as
              per your order before sharing ahead.
            </span>
          </div>
        </div>
      </AppLayout>
    </React.Fragment>
  );
}

export default withAuth(ExportCosting);
