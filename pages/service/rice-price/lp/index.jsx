/** @format */

import React, { useCallback } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useSelector, useDispatch } from "react-redux";

// import moment from "moment";
import useRazorpay from "react-razorpay";
import { useOverlayContext } from "@/context/OverlayContext";

import withAuth from "@/hoc/withAuth";
import AppLayout from "@/layouts/appLayout.jsx";

import {
  getServicesRequest,
  getPlansRequest,
  // getSubscriptionRequest,
} from "@/redux/actions/subscription.action";

import {
  // fetchMyCostingRequest,
  fetchAllMyCostingsRequest,
  // saveCostingFailure,
} from "@/redux/actions/myCosting.actions";

// Import Components
import { Header } from "@/components/Header";
import axios from "axios";

import { apiStagePaymentBeUrl, exportCostingServiceId } from "utils/helper";
import { riceLpContent, planCardContent } from "constants/riceLpContent";

function lp() {
  const router = useRouter();
  const dispatch = useDispatch();
  const [Razorpay] = useRazorpay();

  const { openBottomSheet, openToastMessage } = useOverlayContext();

  const myCosting = useSelector((state) => state.myCosting);
  const servicesData = useSelector((state) => state.subscription?.services);
  const plansData = useSelector((state) => state.subscription?.plans);

  const userDetails = useSelector((state) => state.auth?.user);
  const authToken = useSelector((state) => state.auth?.token);

  const [allMyCostingsData, setAllMyCostingsData] = React.useState([]);
  const [modulePlansData, setModulePlansData] = React.useState([]);
  const [moduleServicesData, setModuleServicesData] = React.useState([]);
  const [usersSubscriptionData, setUsersSubscriptionData] =
    React.useState(null);

  const API_STAGE_PAYMENT_BE = apiStagePaymentBeUrl;
  const SERVICE_ID = Number(exportCostingServiceId); // should be Number

  React.useEffect(() => {
    dispatch(fetchAllMyCostingsRequest());
  }, []);

  React.useEffect(() => {
    if (
      myCosting?.allMyCostingsFromHistory &&
      myCosting?.allMyCostingsFromHistory?.length
    ) {
      setAllMyCostingsData([...myCosting.allMyCostingsFromHistory]);
    }
  }, [myCosting]);

  React.useEffect(() => {
    dispatch(getServicesRequest());
  }, []);

  React.useEffect(() => {
    if (servicesData && servicesData.length) {
      setModuleServicesData([...servicesData]);
      dispatch(getPlansRequest());
    }
  }, [servicesData]);

  const checkUserSubscriptionDetails = async () => {
    try {
      const response = await axios.get(
        API_STAGE_PAYMENT_BE +
          "api" +
          "/user-subscription?serviceId=" +
          SERVICE_ID,
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      return response.data;
    } catch (err) {
      return err;
    }
  };

  function calculateDaysLeft(expiryDate) {
    const currentDate = new Date();
    const expiry = new Date(expiryDate);
    const differenceInTime = expiry.getTime() - currentDate.getTime();
    const differenceInDays = Math.ceil(differenceInTime / (1000 * 3600 * 24));
    return differenceInDays;
  }

  React.useEffect(() => {
    if (modulePlansData.length) {
      const getUsersSubscriptionDetails = async () => {
        const response = await checkUserSubscriptionDetails();
        if (typeof response === "object") {
          setUsersSubscriptionData(response);
        }

        if (response?.length) {
          setUsersSubscriptionData(response[0]);
        }
      };

      getUsersSubscriptionDetails();
    }
  }, [modulePlansData]);

  return (
    <React.Fragment>
      <Head>
        <meta charSet="utf-8" />

        <title>Subscription | PWIP</title>

        <meta name="Reciplay" content="Reciplay" />
        <meta name="description" content="Generated by create next app" />

        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        {/*<meta
          name="apple-mobile-web-app-status-bar-style"
          content="black-translucent"
        />
*/}
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />

        {/* <link rel="manifest" href="/manifest.json" /> */}
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>

      <AppLayout>
        <Header />

        <div className={`relative h-full w-full bg-white z-0`}>
          <div
            className={`min-h-[calc(100vh-120px)] inline-flex flex-col h-full w-full px-5 pt-[82px] pb-[120px] bg-white overflow-auto hide-scroll-bar`}
          >
            <React.Fragment>
              <div className="text-[#1B1B1B] text-[20px] font-bold mb-8 flex justify-between">
                <span>Find the right rice price with us</span>
                <div className="bg-[#F7F7F7] h-[80px] w-[180px] rounded-md"></div>
              </div>

              <div className="bg-[#FFF8E9] p-5 rounded-lg">
                <div className="font-semibold text-[14px]">Free Trial</div>
                <div className="text-[12px] font-normal mt-2">
                  We update rice price every 2 weeks, see prices for 120+
                  variety of rice{" "}
                </div>
                <div className="font-normal text-sm text-[12px] text-[#2072AB] mt-3.5">
                  Start now{" "}
                </div>
              </div>
              <div className="font-semibold text-[14px] mt-6">
                Pick your Plan
              </div>
              <p className="font-normal text-[12px] text-[#1B1B1B] mt-1.5">
                Recurring billing and cancel anytime.
              </p>
              <div>
                {planCardContent.map((plan, index) => (
                  <div
                    key={index}
                    className={`bg-gradient-to-tl from-[${
                      plan.colorDark
                    }] to-[${plan.colorLight}]
                     py-7 px-5 text-white mt-${
                       index === 0 ? "6" : "4"
                     } rounded-lg mb-3.5`}
                  >
                    {plan.recommended && (
                      <div className="bg-white h-[15px] w-[80px] text-[#384F90] text-center text-[10px] font-semibold rounded-sm mb-3">
                        Recommended
                      </div>
                    )}
                    <div className="font-bold text-[16px] mt-2">
                      {plan.name}
                    </div>
                    <div className="text-[11px] font-light mt-0.5">
                      &#8377;{plan.yearlyPrice}/- for 12 months
                    </div>
                    <p className="font-normal text-[12px] mt-1.5">
                      {plan.description}
                    </p>
                    <div className="flex justify-between mt-8">
                      <div className="font-semibold text-[14px]">
                        &#8377;{plan.price}/
                        <span className="font-normal">month</span>
                      </div>
                      <div className="bg-white h-[28px] w-[98px] text-[#384F90] text-center p-1 text-[12px] font-semibold rounded-sm">
                        Start now
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-6">
                <div className="text-[20px] font-bold mb-8">
                  What do you get?
                </div>
                {riceLpContent.map((rice, index) => (
                  <div>
                    <div className="flex justify-normal mb-2.5" key={index}>
                      <div className="bg-[#FFD271] font-bold text-[12px] pl-1 w-[16px] h-[16px] align-center rounded-sm">
                        {rice.no}
                      </div>
                      <div className="font-bold text-[14px] ml-2">
                        {rice.name}
                      </div>
                    </div>
                    <div className="font-normal text-[12px]">
                      {rice.description}
                    </div>
                    {rice.premiumFeature && (
                      <div className="bg-[#FFD271]  h-[16px] w-[95px] text-black text-center text-[10px] font-semibold rounded-md mt-1 mb-5">
                        Premium feature
                      </div>
                    )}
                    <div className="bg-[#F7F7F7] mt-4 mb-6 h-[136px] w-full rounded-md"></div>
                  </div>
                ))}
                <div className="bg-[#F7F7F7] mt-4 mb-6 h-[176px] w-full rounded-md"></div>
              </div>
              <div className="bg-[#006EB4] text-white p-3 text-center font-medium text-[16px] rounded-md">
                Unlock Free Trial
              </div>
            </React.Fragment>
          </div>
        </div>
      </AppLayout>
    </React.Fragment>
  );
}

export default withAuth(lp);
